public class DFS {
    static class Graph {
        private int V; // Number of vertices
        private int[][] adjMatrix; // Adjacency Matrix

        // Constructor
        Graph(int[][] matrix) {
            V = matrix.length;
            adjMatrix = matrix;
        }

        // A recursive function to print DFS starting from v
        void DFSUtil(int v, boolean visited[]) {
            // Mark the current node as visited and print it
            visited[v] = true;
            System.out.print(v + " ");

            // Recur for all the vertices adjacent to this vertex
            for (int i = 0; i < V; ++i) {
                if (adjMatrix[v][i] == 1 && !visited[i])
                    DFSUtil(i, visited);
            }
        }

        // The function to do DFS traversal. It uses recursive DFSUtil()
        void DFS(int v) {
            boolean visited[] = new boolean[V];
            DFSUtil(v, visited);
        }
    }

    // Main method
    public static void main(String args[]) {
        int[][] matrix = {
                {0, 1, 1, 1},
                {1, 0, 0, 1},
                {1, 0, 0, 1},
                {1, 1, 1, 0}
        };

        Graph g = new Graph(matrix);

        System.out.println("Depth First Traversal of the graph:");

        g.DFS(0);
    }
}

O/p:

Depth First Traversal of the graph:
0 1 3 2 
