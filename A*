import java.util.*;

public class AStarAlgorithm {
    public static void main(String[] args) {
        // Define the graph as an adjacency matrix
        int[][] graph = {
                {0, 5, 9, 0, 0, 0},
                {0, 0, 0, 2, 3, 0},
                {0, 0, 0, 0, 2, 0},
                {0, 0, 0, 0, 0, 4},
                {0, 0, 0, 0, 0, 5},
                {0, 0, 0, 0, 0, 0}
        };

        // Find the shortest path from node 0 to node 5
        List<Integer> shortestPath = aStar(graph, 0, 5);
        if (shortestPath != null) {
            System.out.println("Shortest path from 0 to 5: " + shortestPath);
        } else {
            System.out.println("No path exists from 0 to 5.");
        }
    }

    private static List<Integer> aStar(int[][] graph, int start, int goal) {
        int[] cameFrom = new int[graph.length];
        int[] gScore = new int[graph.length];
        int[] fScore = new int[graph.length];

        for (int i = 0; i < cameFrom.length; i++) {
            cameFrom[i] = -1;
        }

        for (int i = 0; i < gScore.length; i++) {
            gScore[i] = Integer.MAX_VALUE;
        }

        for (int i = 0; i < fScore.length; i++) {
            fScore[i] = Integer.MAX_VALUE;
        }

        PriorityQueue<Integer> openSet = new PriorityQueue<>(Comparator.comparingInt(node -> fScore[node]));
        Set<Integer> closedSet = new HashSet<>();

        gScore[start] = 0;
        fScore[start] = heuristicCost(start, goal);
        openSet.add(start);

        while (!openSet.isEmpty()) {
            int current = openSet.poll();

            if (current == goal) {
                return reconstructPath(cameFrom, current);
            }

            closedSet.add(current);

            for (int neighbor = 0; neighbor < graph[current].length; neighbor++) {
                if (graph[current][neighbor] == 0 || closedSet.contains(neighbor)) {
                    continue;
                }

                int tentativeGScore = gScore[current] + graph[current][neighbor];

                if (!openSet.contains(neighbor) || tentativeGScore < gScore[neighbor]) {
                    cameFrom[neighbor] = current;
                    gScore[neighbor] = tentativeGScore;
                    fScore[neighbor] = tentativeGScore + heuristicCost(neighbor, goal);
                    if (!openSet.contains(neighbor)) {
                        openSet.add(neighbor);
                    }
                }
            }
        }

        return null;
    }

    private static List<Integer> reconstructPath(int[] cameFrom, int current) {
        List<Integer> path = new ArrayList<>();
        while (current != -1) {
            path.add(current);
            current = cameFrom[current];
        }
        Collections.reverse(path);
        return path;
    }

    private static int heuristicCost(int node, int goal) {
        // A simple heuristic function (Euclidean distance)
        return Math.abs(node - goal);
    }
}

o/p:
Shortest path from 0 to 5: [0, 1, 3, 5]

