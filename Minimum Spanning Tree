import java.util.*;

public class DijkstraMST {
    static class Edge {
        int destination, weight;

        Edge(int destination, int weight) {
            this.destination = destination;
            this.weight = weight;
        }
    }

    static class Graph {
        int V;
        List<List<Edge>> adjList;

        Graph(int V) {
            this.V = V;
            adjList = new ArrayList<>(V);
            for (int i = 0; i < V; i++) {
                adjList.add(new ArrayList<>());
            }
        }

        void addEdge(int source, int destination, int weight) {
            Edge edge1 = new Edge(destination, weight);
            Edge edge2 = new Edge(source, weight);
            adjList.get(source).add(edge1);
            adjList.get(destination).add(edge2);
        }

        void dijkstraMST(int source) {
            PriorityQueue<Edge> pq = new PriorityQueue<>(Comparator.comparingInt(e -> e.weight));
            boolean[] inMST = new boolean[V];
            int[] dist = new int[V];
            int[] parent = new int[V];

            // Initialize arrays manually
            for (int i = 0; i < V; i++) {
                dist[i] = Integer.MAX_VALUE;
                parent[i] = -1;
            }

            dist[source] = 0;
            pq.offer(new Edge(source, 0));

            while (!pq.isEmpty()) {
                int u = pq.poll().destination;

                if (inMST[u])
                    continue;

                inMST[u] = true;

                for (Edge edge : adjList.get(u)) {
                    int v = edge.destination;
                    int weight = edge.weight;

                    if (!inMST[v] && dist[u] != Integer.MAX_VALUE && dist[u] + weight < dist[v]) {
                        dist[v] = dist[u] + weight;
                        parent[v] = u;
                        pq.offer(new Edge(v, dist[v]));
                    }
                }
            }

            // Print the MST edges
            System.out.println("Edge   Weight");
            for (int i = 1; i < V; i++) {
                System.out.println(parent[i] + " - " + i + "    " + dist[i]);
            }
        }
    }

    public static void main(String[] args) {
        int V = 5;
        Graph graph = new Graph(V);
        graph.addEdge(0, 1, 2);
        graph.addEdge(0, 3, 6);
        graph.addEdge(1, 2, 3);
        graph.addEdge(1, 3, 8);
        graph.addEdge(1, 4, 5);
        graph.addEdge(2, 4, 7);
        graph.addEdge(3, 4, 9);

        graph.dijkstraMST(0);
    }
}
o/p:
Edge   Weight
0 - 1    2
1 - 2    5
0 - 3    6
1 - 4    7
