import java.util.*;

public class KruskalMST {
    static class Edge implements Comparable<Edge> {
        int source, destination, weight;

        Edge(int source, int destination, int weight) {
            this.source = source;
            this.destination = destination;
            this.weight = weight;
        }

        @Override
        public int compareTo(Edge other) {
            return Integer.compare(this.weight, other.weight);
        }
    }

    static class Subset {
        int parent, rank;

        Subset(int parent, int rank) {
            this.parent = parent;
            this.rank = rank;
        }
    }

    static class Graph {
        int V, E;
        List<Edge> edges;

        Graph(int V, int E) {
            this.V = V;
            this.E = E;
            edges = new ArrayList<>(E);
        }

        void addEdge(int source, int destination, int weight) {
            Edge edge = new Edge(source, destination, weight);
            edges.add(edge);
        }

        int find(Subset[] subsets, int i) {
            if (subsets[i].parent != i) {
                subsets[i].parent = find(subsets, subsets[i].parent);
            }
            return subsets[i].parent;
        }

        void union(Subset[] subsets, int x, int y) {
            int xRoot = find(subsets, x);
            int yRoot = find(subsets, y);

            if (subsets[xRoot].rank < subsets[yRoot].rank) {
                subsets[xRoot].parent = yRoot;
            } else if (subsets[xRoot].rank > subsets[yRoot].rank) {
                subsets[yRoot].parent = xRoot;
            } else {
                subsets[yRoot].parent = xRoot;
                subsets[xRoot].rank++;
            }
        }

        void kruskalMST() {
            List<Edge> result = new ArrayList<>();

            edges.sort(Comparator.naturalOrder());

            Subset[] subsets = new Subset[V];
            for (int i = 0; i < V; i++) {
                subsets[i] = new Subset(i, 0);
            }

            int i = 0, e = 0;
            while (e < V - 1 && i < edges.size()) {
                Edge nextEdge = edges.get(i++);
                int x = find(subsets, nextEdge.source);
                int y = find(subsets, nextEdge.destination);

                if (x != y) {
                    result.add(nextEdge);
                    union(subsets, x, y);
                    e++;
                }
            }

            // Print the MST edges
            System.out.println("Edge   Weight");
            for (Edge edge : result) {
                System.out.println(edge.source + " - " + edge.destination + "    " + edge.weight);
            }
        }
    }

    public static void main(String[] args) {
        int V = 4; // Number of vertices
        int E = 5; // Number of edges

        Graph graph = new Graph(V, E);
        graph.addEdge(0, 1, 10);
        graph.addEdge(0, 2, 6);
        graph.addEdge(0, 3, 5);
        graph.addEdge(1, 3, 15);
        graph.addEdge(2, 3, 4);

        graph.kruskalMST();
    }
}
o/p:
Edge   Weight
2 - 3    4
0 - 3    5
0 - 1    10
